# git branch
    https://backlog.com/git-tutorial/kr/stepup/stepup2_2.html

# 앱의 구동과정/경로

App.js : App이 인식하는 첫 파일 

Gate.js 를 만들어서 (components/Gate.js)
    Login 상태  - on  -> Main (navigation/Main.js)
                - off -> Auth (navigation/Auth.js)

Auth (navigation/Auth.js)
    Navigator 사용해서 아래 경로로 이동할 수 있게 해주기
    3가지 경로  - Welcome
                - LogIn
                - SignUp

    Welcome, SignIn, SignUp 을 나타내는 화면은 screens에 생성
    LogIn, SignUp 의 경우, 폴더를 만들어서, index, LogInContainer(백엔드), LogInPresenter(프론트엔드) 로 나눠줌

Main (navigation/Auth.js)
    Auth와 마찬가지로 Navigator 이용
    원하는 Page들 navigation


navigation 설치
    $ npm install @react-navigation/native
    $ npm install @react-navigation/stack
    $ expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

styled-components 설치 (css용)
    $ npm install styled-components


react-redux 사용: App.js 에서 <Provider>로 감싸야 가능
useReduxContext.js:24 Uncaught Error: could not find react-redux context value; please ensure the component is wrapped in a <Provider>
Provider 는 store 가 필요
    <Provider store={}>

    ex)
        (redux/store)
        import { configureStore } from "@reduxjs/toolkit";
        import rootReducer from "./rootReducer";

        const store = configureStore({
            reducer: rootReducer
        });

        export default store;


        (App.js)
        import store from './redux/store';

        <Provider store={store}>
            ...
        </Provider>
        



* Error: Actions must be plain objects. Instead, the actual type was: 'Promise'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.


* react-native-table-component
    매뉴얼: https://www.npmjs.com/package/react-native-table-component
    예제: https://snack.expo.dev/@taltalrealty/2e2be2


* tab navigation customize
    https://medium.com/litslink/react-native-tab-bar-is-customizable-c3c37dcf711f

* StyleSheet.create
    const styles = StyleSheet.create({
        BookTypeView: {
            backgroundColor: 'pink',
            alignItems: 'center',
            justifyContent: 'center',
            margin: 5,
            width: width*1/4,
            height: height*1/20,
            borderRadius: 10
        },

        BookTypeTO: {
            backgroundColor: '#B2EBF4',
            alignItems: 'center',
            justifyContent: 'center',
            margin: 5,
            width: width*1/4,
            height: height*1/21,
            borderRadius: 10
        },

        scrollViewContainerStyle:{
            alignItems: 'center',
            height: height * 7/20,
            marginBottom: height*0.6/18,
            marginTop: height*0.6/18
        }
    })

    const BookType = () => {
        const navigation = useNavigation();
        return(
            <>
            <ScrollView contentContainerStyle={styles.scrollViewContainerStyle}>
                <View style={styles.BookTypeView}><Text>매매</Text></View>
                <TouchableOpacity onPress={() => navigation.navigate("DealApartmentTable")} style={styles.BookTypeTO}><Text>아파트</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("DealVillaTable")} style={styles.BookTypeTO}><Text>빌라</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("DealOfficetelTable")} style={styles.BookTypeTO}><Text>오피스텔</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("DealStoreTable")} style={styles.BookTypeTO}><Text>상가</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("DealBuildingTable")} style={styles.BookTypeTO}><Text>건물</Text></TouchableOpacity>
            </ScrollView>
            <ScrollView contentContainerStyle={styles.scrollViewContainerStyle}>
                <View style={styles.BookTypeView}><Text>임대</Text></View>
                <TouchableOpacity onPress={() => navigation.navigate("LeaseApartmentTable")} style={styles.BookTypeTO}><Text>아파트</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("LeaseVillaTable")} style={styles.BookTypeTO}><Text>주택</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("LeaseOfficetelTable")} style={styles.BookTypeTO}><Text>오피스텔</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("LeaseStoreTable")} style={styles.BookTypeTO}><Text>상가</Text></TouchableOpacity>
            </ScrollView>
            </>
        );
    }

    const CustomerType = () => {
        const navigation = useNavigation();
        return(
            <>
            <ScrollView contentContainerStyle={styles.scrollViewContainerStyle}>
                <View style={styles.BookTypeView}><Text>매매</Text></View>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerDealApartmentTable")} style={styles.BookTypeTO}><Text>아파트</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerDealVillaTable")} style={styles.BookTypeTO}><Text>빌라</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerDealOfficetelTable")} style={styles.BookTypeTO}><Text>오피스텔</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerDealStoreTable")} style={styles.BookTypeTO}><Text>상가</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerDealBuildingTable")} style={styles.BookTypeTO}><Text>건물</Text></TouchableOpacity>
            </ScrollView>
            <ScrollView contentContainerStyle={styles.scrollViewContainerStyle}>
            <View style={styles.BookTypeView}><Text>임대</Text></View>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerLeaseApartmentTable")} style={styles.BookTypeTO}><Text>아파트</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerLeaseVillaTable")} style={styles.BookTypeTO}><Text>주택</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerLeaseOfficetelTable")} style={styles.BookTypeTO}><Text>오피스텔</Text></TouchableOpacity>
                <TouchableOpacity onPress={() => navigation.navigate("CustomerLeaseStoreTable")} style={styles.BookTypeTO}><Text>상가</Text></TouchableOpacity>
            </ScrollView>
            </>
        );
    }


    const Book = (props) => {
        return(        
            <>
            <View>
                <Div>
                <MainTitle>
                    <MainTitleText>매물</MainTitleText>
                </MainTitle>
                <BookType />
                </Div>
                <Div>
                <MainTitle>
                    <MainTitleText>손님</MainTitleText>
                </MainTitle>
                <CustomerType />
                </Div>
            </View>
            </>
        )
    };


* 구글 플레이 콘솔 앱 업데이트
    https://wp.swing2app.co.kr/knowledgebase/palystore-update/


* React Query
    앱은 웹과 다르게 한 페이지만 신경쓰면 되는게 아니라
    사용하다 보면 화면들이 stack으로 쌓이는데, 이때
    여러 화면에서 여러 데이터를 동기화 할때 사용해서, 일일히 redux를 건드리지 않아도 되게 해준다.
    -> 한번 알아보자